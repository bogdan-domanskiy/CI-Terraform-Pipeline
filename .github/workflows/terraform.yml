name: 'Terraform'

on:
  push:
    branches:
    - develop
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ACCESS_KEY_BACK: ${{secrets.ACCESS_KEY_BACK}}
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      PRINCIPAL_NAME: ${{secrets.PRINCIPAL_NAME}}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Check the Terraform and AZ versions.
      run: terraform -v && az --version

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init  -var="principal_name=${{ secrets.PRINCIPAL_NAME }}" -var="sa_key=${{ secrets.ACCESS_KEY_BACK }}"


    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var="principal_name=${{ secrets.PRINCIPAL_NAME }}" -var="sa_key=${{ secrets.ACCESS_KEY_BACK }}"

      # On push to develop, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/develop' && github.event_name != 'pull_request'
      run: terraform apply -var="principal_name=${{ secrets.PRINCIPAL_NAME }}" -var="sa_key=${{ secrets.ACCESS_KEY_BACK }}" -auto-approve
